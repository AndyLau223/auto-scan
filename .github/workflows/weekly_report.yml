name: Weekly Tech Report

on:
  schedule:
    - cron: '0 14 * * 1'  # 每周一北京时间14:00运行
  workflow_dispatch:
# on: [push]

jobs:
  generate-report:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用自动生成的token
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: pull latest code
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@users.noreply.github.com'
        git pull origin main --rebase

    - name: Run data collector
      run: python scripts/collector.py
      
    - name: Process data
      run: python scripts/processor.py
      
    - name: Generate report
      run: python scripts/reporter.py
      
    - name: Commit report if changed
      id: commit-report
      run: |
          if ! git diff --quiet tech_trends_report.md; then
            git add tech_trends_report.md
            git commit -m "Auto-update weekly tech report"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in report"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

    - name: Archive old reports and create new
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs').promises;
          const report = await fs.readFile('tech_trends_report.md', 'utf8');
          
          // 创建新 Issue
          const newIssue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Weekly Tech Report - ${new Date().toISOString().split('T')[0]}`,
            body: report,
            labels: ['tech-trends-report']
          });
          
          // 归档旧报告（添加标签并关闭）
          const oldIssues = await github.paginate(github.rest.issues.listForRepo, {
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'tech-trends-report',
            state: 'open'
          });
          
          for (const issue of oldIssues) {
            if (issue.number !== newIssue.data.number) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                labels: [...issue.labels.map(l => l.name), 'archived']
              });
            }
          }

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: newIssue.data.number,
            body: `Report is ready! @${{ github.actor }}`
          })

    - name: Send email via RESEND
      env:
        RECEIVER_EMAIL: ${{ secrets.REPORT_RECEIVER }}
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      run: | 
        REPORT_CONTENT=$(cat tech_trends_report.md)
        DATE=$(date +"%Y-%m-%d")
        

        JSON=$(jq -n \
          --arg from "Tech Tracker <notify@github-actions.com>" \
          --arg to "$RECEIVER_EMAIL" \
          --arg subject "Weekly Tech Report - $DATE" \
          --arg html "<h1 style=\"color:#2563eb\">Weekly Tech Report</h1><div style=\"background:#f3f4f6;padding:20px;border-radius:8px\"><pre style=\"white-space:pre-wrap\">$(cat tech_trends_report.md | jq -Rs .)</pre></div><p style=\"color:#6b7280;font-size:0.8rem\">Automatically generated by GitHub Actions</p>" \
          '{from: $from, to: $to, subject: $subject, html: $html}'
        )

        curl -X POST "https://api.resend.com/emails" \
          -H "Authorization: Bearer $RESEND_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON"
          