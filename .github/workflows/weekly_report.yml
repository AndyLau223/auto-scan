name: Weekly Tech Report

on:
  schedule:
    - cron: '0 14 * * 1'  # 每周一北京时间14:00运行
  workflow_dispatch:
# on: [push]

jobs:
  generate-report:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用自动生成的token
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: pull latest code
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@users.noreply.github.com'
        git pull origin main --rebase

    - name: Run data collector
      run: python scripts/collector.py
      
    - name: Process data
      run: python scripts/processor.py
      
    - name: Generate report
      run: python scripts/reporter.py
      
    - name: Commit and push report
      run: |
        git add tech_trends_report.md
        git commit -m "Auto-update weekly tech report"
        git push

    - name: Archive old reports and create new
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs').promises;
          const report = await fs.readFile('tech_trends_report.md', 'utf8');
          
          // 创建新 Issue
          const newIssue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Weekly Tech Report - ${new Date().toISOString().split('T')[0]}`,
            body: report,
            labels: ['tech-trends-report']
          });
          
          // 归档旧报告（添加标签并关闭）
          const oldIssues = await github.paginate(github.rest.issues.listForRepo, {
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'tech-trends-report',
            state: 'open'
          });
          
          for (const issue of oldIssues) {
            if (issue.number !== newIssue.data.number) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                labels: [...issue.labels.map(l => l.name), 'archived']
              });
            }
          }